and : Type -> Type -> Type
and = \p. \q. (c: Type) -> (p -> q -> c) -> c

conj : (p:Type) -> (q:Type) -> p -> q -> and p q
conj = \p. \q. \x.\y. \c. \f. f x y

proj1 : (p:Type) -> (q:Type) -> and p q -> p
proj1 = \p. \q. \a. a p (\x.\y.x)

proj2 : (p:Type) -> (q:Type) -> and p q -> q
proj2 = \p. \q. \a. a q (\x.\y.y)

and_commutes : (p:Type) -> (q:Type) -> and p q -> and q p
and_commutes = \p. \q. \a. conj q p (proj2 p q a) (proj1 p q a)

compose : (A : Type) -> (B : Type) -> (C:Type) -> (B -> C) -> (A -> B) -> (A -> C)
compose = \A. \B. \C. \f. \g. \x. (f (g x))

id : (x:Type) -> x -> x
id = \x. \y. y 

idid : (x:Type) -> (y : x) -> x
idid = id ((x:Type) -> (y : x) -> x) id